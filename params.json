{"name":"Wear 101","tagline":"Android wear codelab for FIT 2014","body":"## Welcome\r\nAs you may already know, wearable devices have arrived. We are right now being witnesses of a new era on personal computing. We are about to enter a world where we'll connected 24/7. This can be truly awesome, but can also be terryble. Being connected all the time means having to deal with a lot of information constantly, this can be very distracting, and even frustrating.\r\n\r\nThis is where wearables should be the hero, a wearable device must only be noticed when needed, and passed unnoticed the rest of the time.\r\n\r\nThis means you are at the right time to start making cool stuff with wearables, hopefully this codelab will be just the kickstart you have been waiting for.\r\n\r\nAs you already know, Android Wear is the newest platform for wearable devices from Google. It leverages on the power of the Android platform you already know. And therefore provides great compatibility with existing Android applications you have already built. \r\n\r\nIf your Android app uses Notifications, then chances are these notifications will show up on an Android Wear compatible device with no extra work. How awesome is that?\r\n\r\nBut, you can make a little work and improve the experience significatively. We will work on this today.\r\n\r\n### Getting the source\r\n\r\nLet's get started by downloading the codelab base code, you can find links for doing this on the right side of the page. Or just follow this [link](https://github.com/diegofigueroa/fit-wear-lab/archive/master.zip)\r\nExtract the `.zip` file contents in some place you remember, we'll use this later.\r\n\r\n### Steps\r\n\r\nThe codelab is split into the following steps:\r\n\r\n1. Getting started\r\n2. Set up an Android Virtual Device (AVD) for Wear\r\n3. Showing my first notification on Wear\r\n4. Extending notifications for Wear\r\n5. Done!\r\n\r\nLet's get started! Scroll down to see your first step.\r\n\r\n## Getting started\r\nSet up the Android Studio project and explore the sample app.\r\n\r\n1. [Welcome!](/fit-wear-lab/#welcome-1)\r\n2. [Start Android Studio and import the Android Wear codelab project](/fit-wear-lab/)\r\n3. [Build the sample app](/fit-wear-lab/)\r\n4. [Run the sample app](/fit-wear-lab/)\r\n5. [Explore the app and the code](/fit-wear-lab/)\r\n6. [Test app functionality](/fit-wear-lab/)\r\n\r\n#### Welcome!\r\n\r\nIn this codelab you will modify a **very** simple Android application. It's designed to be a playground where you can build wathever you want using Android Notifications,\r\nmaking them look beatiful on an Android Wear device, but also being useful and easy to work with.\r\n\r\nCurrently, users can launch the app from the Android launcher and tap a button to fire a very simple Android notification. Nothing very interesting so far.\r\n\r\nYou will update this application to include different kind of notifications, and also extending them to take advantage of Android Wear features.\r\n\r\nThe three things you will learn in this codelab are:  \r\n\r\n1. Display notifications on Wear.\r\n2. Include Actions on Android notifications.\r\n3. Extend Android Notifications to be even more useful on a wearable device.\r\n\r\nYou will need to set up the following resources.\r\n\r\n* Android Studio.\r\n* Android device or emulator to test with.\r\n* Android Wear device or emulator to test with.\r\n\r\n#### Start Android Studio and import the Android Wear codelab project\r\n\r\n1. Open Android studio\r\n2. In Android Studio, choose File -> Import Project and import the project you downloaded a few minutes ago.\r\n3. After the import, your project will appear in Android Studio.\r\n\r\n#### Build the sample app\r\n\r\n1. Select Build > Make Project. This will build the entire project. Make sure build completes without errors.\r\n\r\n#### Run the sample app\r\n\r\n**Prepare the Android device.**\r\n\r\nIf you have a physical device, connect it to your codelab machine via USB.\r\nIf you don't have a physical device you can use an emulator (AVD), you should find one alredy created for you.\r\n\r\n1. In Android Studio, click  (`Shift-F10`) to run the Android app.\r\n2. To run on your connected device, click Choose a running device and then click the device. (Or you can launch on an emulator.)\r\n3. Wait for the device to launch the application.\r\n4. You will eventually see the main screen with a simple button.\r\n\r\n#### Explore the app and the code\r\n\r\nThis simple music app consists of a single activity showing a button. \r\n\r\nThese screen correspond to the following code files.\r\n\r\n* `MainActivity.java`: The main entry point for the app. It shows the button.\r\n* `The AndroidManifest.xml` file configures the app components.\r\n* `activity_main.xml`: Set up the UI of the visible components.\r\n* Other files define image, string constants and other kind of resources.\r\n\r\n#### Test app functionality\r\n\r\n1. If the app is not already running, click (Shift-F10) in Android Studio to launch it.\r\n2. On the main screen, tap the button.\r\n3. A simple notification should be shown on the screen.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}